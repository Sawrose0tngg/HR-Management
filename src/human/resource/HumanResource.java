package human.resource;

import java.awt.Color;
import java.awt.Component;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class HumanResource extends javax.swing.JFrame {

    boolean temp = true;

    Connection conn = null;
    DefaultTableModel dtm1, dtm2;

    MyRenderer renderer = new MyRenderer();

    public HumanResource() {
        initComponents();
        setLocationRelativeTo(null);
        selects.setVisible(false);
        applied.setVisible(true);
        radioApply.doClick();
//        showData();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        radioApply = new javax.swing.JRadioButton();
        radioSelect = new javax.swing.JRadioButton();
        applied = new javax.swing.JPanel();
        selects = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        apply = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        appliedCandidate = new javax.swing.JTable();
        select = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        selectedCandidate = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtCompany = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Human Resource");
        setBackground(new java.awt.Color(207, 245, 245));
        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 191, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(153, 153, 153)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Wide Latin", 1, 24)); // NOI18N
        jLabel1.setText("Application  Candidates");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(254, 2, -1, 46));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logo.jpg"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 2, -1, 58));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 2, 1020, 57));

        buttonGroup1.add(radioApply);
        radioApply.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        radioApply.setText("Applied Candidate");
        radioApply.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radioApplyMouseClicked(evt);
            }
        });
        radioApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioApplyActionPerformed(evt);
            }
        });
        getContentPane().add(radioApply, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 80, -1, 20));

        buttonGroup1.add(radioSelect);
        radioSelect.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        radioSelect.setText("Selected Candidate");
        radioSelect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radioSelectMouseClicked(evt);
            }
        });
        radioSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioSelectActionPerformed(evt);
            }
        });
        getContentPane().add(radioSelect, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 80, -1, 20));

        applied.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        applied.setPreferredSize(new java.awt.Dimension(170, 2));

        javax.swing.GroupLayout appliedLayout = new javax.swing.GroupLayout(applied);
        applied.setLayout(appliedLayout);
        appliedLayout.setHorizontalGroup(
            appliedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 179, Short.MAX_VALUE)
        );
        appliedLayout.setVerticalGroup(
            appliedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(applied, new org.netbeans.lib.awtextra.AbsoluteConstraints(351, 102, 181, -1));

        selects.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        selects.setPreferredSize(new java.awt.Dimension(170, 2));

        javax.swing.GroupLayout selectsLayout = new javax.swing.GroupLayout(selects);
        selects.setLayout(selectsLayout);
        selectsLayout.setHorizontalGroup(
            selectsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 187, Short.MAX_VALUE)
        );
        selectsLayout.setVerticalGroup(
            selectsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(selects, new org.netbeans.lib.awtextra.AbsoluteConstraints(575, 104, 189, -1));

        appliedCandidate.setFont(new java.awt.Font("Times New Roman", 0, 16));
        appliedCandidate.getTableHeader().setFont(new java.awt.Font("Times New Roman", java.awt.Font.BOLD, 16));
        appliedCandidate.setRowHeight(25);
        appliedCandidate.setForeground(Color.BLACK);
        appliedCandidate.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "S.No", "Full Name", "Qualification", "Applied Post", "Expected Salary", "Document", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        appliedCandidate.setDefaultRenderer(Object.class, renderer);
        appliedCandidate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                appliedCandidateMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                appliedCandidateMouseEntered(evt);
            }
        });
        jScrollPane1.setViewportView(appliedCandidate);
        if (appliedCandidate.getColumnModel().getColumnCount() > 0) {
            appliedCandidate.getColumnModel().getColumn(0).setMinWidth(30);
            appliedCandidate.getColumnModel().getColumn(0).setPreferredWidth(50);
            appliedCandidate.getColumnModel().getColumn(0).setMaxWidth(100);
            appliedCandidate.getColumnModel().getColumn(3).setMinWidth(100);
            appliedCandidate.getColumnModel().getColumn(3).setPreferredWidth(150);
            appliedCandidate.getColumnModel().getColumn(3).setMaxWidth(200);
            appliedCandidate.getColumnModel().getColumn(4).setMinWidth(80);
            appliedCandidate.getColumnModel().getColumn(4).setPreferredWidth(130);
            appliedCandidate.getColumnModel().getColumn(4).setMaxWidth(150);
            appliedCandidate.getColumnModel().getColumn(5).setMinWidth(50);
            appliedCandidate.getColumnModel().getColumn(5).setPreferredWidth(100);
            appliedCandidate.getColumnModel().getColumn(5).setMaxWidth(200);
            appliedCandidate.getColumnModel().getColumn(6).setMinWidth(50);
            appliedCandidate.getColumnModel().getColumn(6).setPreferredWidth(100);
            appliedCandidate.getColumnModel().getColumn(6).setMaxWidth(200);
        }

        javax.swing.GroupLayout applyLayout = new javax.swing.GroupLayout(apply);
        apply.setLayout(applyLayout);
        applyLayout.setHorizontalGroup(
            applyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1007, Short.MAX_VALUE)
        );
        applyLayout.setVerticalGroup(
            applyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(applyLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        selectedCandidate.setFont(new java.awt.Font("Times New Roman", 0, 14));
        selectedCandidate.getTableHeader().setFont(new java.awt.Font("Times New Roman", java.awt.Font.BOLD, 16));
        selectedCandidate.setRowHeight(25);
        selectedCandidate.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "S.No", "Full Name", "Email", "Applied Company", "Applied Post", "Expected Salary", "Document"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        selectedCandidate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectedCandidateMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(selectedCandidate);
        if (selectedCandidate.getColumnModel().getColumnCount() > 0) {
            selectedCandidate.getColumnModel().getColumn(0).setMinWidth(30);
            selectedCandidate.getColumnModel().getColumn(0).setPreferredWidth(50);
            selectedCandidate.getColumnModel().getColumn(0).setMaxWidth(100);
            selectedCandidate.getColumnModel().getColumn(4).setMinWidth(100);
            selectedCandidate.getColumnModel().getColumn(4).setPreferredWidth(150);
            selectedCandidate.getColumnModel().getColumn(4).setMaxWidth(200);
            selectedCandidate.getColumnModel().getColumn(5).setMinWidth(80);
            selectedCandidate.getColumnModel().getColumn(5).setPreferredWidth(130);
            selectedCandidate.getColumnModel().getColumn(5).setMaxWidth(150);
            selectedCandidate.getColumnModel().getColumn(6).setMinWidth(50);
            selectedCandidate.getColumnModel().getColumn(6).setPreferredWidth(100);
            selectedCandidate.getColumnModel().getColumn(6).setMaxWidth(200);
        }

        javax.swing.GroupLayout selectLayout = new javax.swing.GroupLayout(select);
        select.setLayout(selectLayout);
        selectLayout.setHorizontalGroup(
            selectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1007, Short.MAX_VALUE)
        );
        selectLayout.setVerticalGroup(
            selectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
        );

        jLayeredPane1.setLayer(apply, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(select, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1007, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(apply, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(select, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(apply, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(select, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jLayeredPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 134, -1, -1));

        txtSearch.setForeground(new java.awt.Color(153, 153, 153));
        txtSearch.setText("someone@example.com");
        txtSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txtSearchMouseExited(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtSearchMouseClicked(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });
        getContentPane().add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 100, 160, 30));

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        getContentPane().add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 100, -1, -1));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel3.setText("Company Name:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 109, 28));

        txtCompany.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        getContentPane().add(txtCompany, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, 161, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void radioApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioApplyActionPerformed

        if (radioApply.isSelected()) {
            applied.setVisible(true);
            selects.setVisible(false);
            apply.setVisible(true);
            select.setVisible(false);
        }
        showData();
    }//GEN-LAST:event_radioApplyActionPerformed

    private void radioSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioSelectActionPerformed

        if (radioSelect.isSelected()) {
            selects.setVisible(true);
            applied.setVisible(false);
            apply.setVisible(false);
            select.setVisible(true);
        }
        dtm2 = (DefaultTableModel) selectedCandidate.getModel();
        try {
            conn = DbConnection.getConnection();

            String sql = "select *,selectedcandidate.Email from register inner join selectedcandidate on register.Email = selectedcandidate.Email";

            Statement stmt = conn.createStatement();

            dtm2.setRowCount(0);

            ResultSet rs = stmt.executeQuery(sql);

            int count = 1;
            while (rs.next()) {
                dtm2.addRow(new Object[]{count++, rs.getString("Fname") + " " + rs.getString("Lname"), rs.getString("Email"), rs.getString("Company"), rs.getString("Job"), rs.getString("Salary"), "View"});
            }

        } catch (SQLException ex) {
            Logger.getLogger(HumanResource.class.getName()).log(Level.SEVERE, null, ex);
        }
        txtCompany.setText("");
    }//GEN-LAST:event_radioSelectActionPerformed

    private void appliedCandidateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appliedCandidateMouseClicked
        txtSearch.setText("someone@example.com");
        txtSearch.setForeground(new Color(153, 153, 153));
        int row = appliedCandidate.rowAtPoint(evt.getPoint());
        int column = appliedCandidate.columnAtPoint(evt.getPoint());

        int idd = (int) appliedCandidate.getValueAt(appliedCandidate.getSelectedRow(), 0);

        conn = DbConnection.getConnection();
        dtm2 = (DefaultTableModel) selectedCandidate.getModel();

        if (column == 6) {
            if (!txtCompany.getText().equals("") && appliedCandidate.getModel().getValueAt(appliedCandidate.getSelectedRow(), 6).equals("Not Selected")) {
                insertAndDelete(row, column, idd);
                txtCompany.setText("");
            } else if (txtCompany.getText().equals("") && appliedCandidate.getModel().getValueAt(appliedCandidate.getSelectedRow(), 6).equals("Selected")) {

                String query = "select Email from register where id = '" + idd + "'";
                try {
                    String email = null;
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(query);
                    if (rs.next()) {
                        email = rs.getString("Email");
                    }
                    String sql = "delete from selectedCandidate where Email = '" + email + "'";
                    Statement stmt1 = conn.createStatement();
                    stmt1.execute(sql);
                    showData();
                } catch (SQLException ex) {
                    Logger.getLogger(HumanResource.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if (!txtCompany.getText().equals("") && appliedCandidate.getModel().getValueAt(appliedCandidate.getSelectedRow(), 6).equals("Selected")) {

                String query = "select Email from register where id = '" + idd + "'";
                try {
                    String email = null;
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(query);
                    if (rs.next()) {
                        email = rs.getString("Email");
                    }
                    String sql = "update selectedCandidate set Company = '" + txtCompany.getText() + "' where Email = '" + email + "'";
                    Statement stmt1 = conn.createStatement();
                    stmt1.execute(sql);

                } catch (SQLException ex) {
                    Logger.getLogger(HumanResource.class.getName()).log(Level.SEVERE, null, ex);
                }
                txtCompany.setText("");

            } else {
                JOptionPane.showMessageDialog(null, "Applied Company is empty!!!");
            }
        }
        if (column == 5) {

            String sql = "select cv from register where id = '" + idd + "'";
            try {
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql);
                if (rs.next()) {
                    try {
                        Runtime.getRuntime().exec("rundll32 url.dll, FileProtocolHandler " + "C:\\Users\\sawrose\\Documents\\NetBeansProjects\\Job Chaiyo\\Document\\" + rs.getString("cv"));//space is also required after protocolhandler 
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Unable to Open Documents");
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(HumanResource.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_appliedCandidateMouseClicked

    private void txtSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtSearchMouseClicked
        // TODO add your handling code here:
        txtSearch.setText("");
    }//GEN-LAST:event_txtSearchMouseClicked

    private void txtSearchMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtSearchMouseExited
        // TODO add your handling code here:

    }//GEN-LAST:event_txtSearchMouseExited

    private void radioSelectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radioSelectMouseClicked
        // TODO add your handling code here:
        txtSearch.setText("someone@example.com");
        txtSearch.setForeground(new Color(153, 153, 153));
    }//GEN-LAST:event_radioSelectMouseClicked

    private void radioApplyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radioApplyMouseClicked
        // TODO add your handling code here:
        txtSearch.setText("someone@example.com");
        txtSearch.setForeground(new Color(153, 153, 153));
    }//GEN-LAST:event_radioApplyMouseClicked

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {

            String sql = "select * from register where Email = ?";
            String query = "select * from selectedcandidate where Email= ?";

            conn = DbConnection.getConnection();

            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setString(1, txtSearch.getText());
            PreparedStatement pst1 = conn.prepareStatement(query);
            pst1.setString(1, txtSearch.getText());

            ResultSet rs = pst.executeQuery();
            ResultSet rs1 = pst1.executeQuery();
            if (rs.next()) {
                if (rs1.next()) {
                    if (radioApply.isSelected()) {
                        dtm1.setRowCount(0);
                        dtm1.addRow(new Object[]{rs.getInt("id"), rs.getString("Fname") + " " + rs.getString("Lname"), rs.getString("Skill"), rs.getString("Job"), rs.getString("Salary"), "View", rs1.getString("Status")});
                    }
                    
                    if (radioSelect.isSelected()) {
                        dtm2.setRowCount(0);
                        dtm2.addRow(new Object[]{1, rs.getString("Fname") + " " + rs.getString("Lname"), rs.getString("Email"), rs1.getString("Company"), rs.getString("Job"), rs.getString("Salary"), "View"});
                    }
                }else {
                    if (radioApply.isSelected()) {
                        dtm1.setRowCount(0);
                        dtm1.addRow(new Object[]{rs.getInt("id"), rs.getString("Fname") + " " + rs.getString("Lname"), rs.getString("Skill"), rs.getString("Job"), rs.getString("Salary"), "View", "Not Selected"});
                    }
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(HumanResource.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnSearchActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        txtSearch.setText("someone@example.com");
        txtSearch.setForeground(new Color(153, 153, 153));
    }//GEN-LAST:event_formMouseClicked

    private void selectedCandidateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectedCandidateMouseClicked
        // TODO add your handling code here:
        txtSearch.setText("someone@example.com");
        txtSearch.setForeground(new Color(153, 153, 153));
        int row = selectedCandidate.rowAtPoint(evt.getPoint());
        int column = selectedCandidate.columnAtPoint(evt.getPoint());

        String email = (String) selectedCandidate.getModel().getValueAt(row, 2);

        conn = DbConnection.getConnection();

        if (column == 6) {

            String sql = "select cv from register where Email = '" + email + "'";
            try {

                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql);

                if (rs.next()) {

                    try {
                        Runtime.getRuntime().exec("rundll32 url.dll, FileProtocolHandler " + "C:\\Users\\sawrose\\Documents\\NetBeansProjects\\Job Chaiyo\\Document\\" + rs.getString("cv"));//space is also required after protocolhandler 
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Unable to Open Documents");
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(HumanResource.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_selectedCandidateMouseClicked

    private void appliedCandidateMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appliedCandidateMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_appliedCandidateMouseEntered

    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped
        // TODO add your handling code here:
        txtSearch.setForeground(Color.BLACK);
    }//GEN-LAST:event_txtSearchKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HumanResource.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HumanResource.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HumanResource.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HumanResource.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HumanResource().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel applied;
    private javax.swing.JTable appliedCandidate;
    private javax.swing.JPanel apply;
    private javax.swing.JButton btnSearch;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton radioApply;
    private javax.swing.JRadioButton radioSelect;
    private javax.swing.JPanel select;
    private javax.swing.JTable selectedCandidate;
    private javax.swing.JPanel selects;
    private javax.swing.JTextField txtCompany;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    private void showData() {
        dtm1 = (DefaultTableModel) appliedCandidate.getModel();
        dtm1.setRowCount(0);
        int counter = 0;
        try {
            conn = DbConnection.getConnection();
            String sql = "select * from register";
            String query = "select Email,Status from selectedCandidate";

            Statement stmt = conn.createStatement();
            Statement stmt1 = conn.createStatement();

            ResultSet rs1 = stmt1.executeQuery(query);
            ResultSet rs = stmt.executeQuery(sql);

            int count = 0;
            Statement stmt2 = conn.createStatement();
            ResultSet rs2 = stmt2.executeQuery("select count(*) from register");
            while (rs2.next()) {
                count = rs2.getInt("count(*)");
            }
            String[] email = new String[count];
            int i = 0;
            while (rs.next()) {

                while ((rs1.next())) {
                    email[i] = rs1.getString("Email");
                    i++;
                }
                for (int j = 0; j < count; j++) {
                    if (rs.getString("Email").equals(email[j])) {
                        dtm1.addRow(new Object[]{rs.getInt("id"), rs.getString("Fname") + " " + rs.getString("Lname"), rs.getString("Skill"), rs.getString("Job"), rs.getString("Salary"), "View", "Selected"});
                        counter = 1;
                        break;
                    } else {
                        counter = 0;
                    }
                }
                if (counter == 0) {
                    dtm1.addRow(new Object[]{rs.getInt("id"), rs.getString("Fname") + " " + rs.getString("Lname"), rs.getString("Skill"), rs.getString("Job"), rs.getString("Salary"), "View", "Not Selected"});
                }

            }
        } catch (SQLException ex) {
            Logger.getLogger(HumanResource.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void insertAndDelete(int row, int column, int idd) {
        if (temp == true) {

            appliedCandidate.setValueAt("Selected", row, column);
            temp = false;

            String sql = "insert into selectedCandidate values(?,?, ?)";
            String query = "select Email from register where id = '" + idd + "'";

            PreparedStatement pst;
            try {
                pst = conn.prepareStatement(sql);
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(query);
                while (rs.next()) {
                    pst.setString(1, rs.getString("Email"));
                    pst.setString(2, txtCompany.getText());
                    pst.setString(3, (String) appliedCandidate.getModel().getValueAt(row, column));
                }
                pst.execute();
                JOptionPane.showMessageDialog(null, "Successfully Selected");
                txtCompany.setText("");
            } catch (SQLException ex) {
                Logger.getLogger(HumanResource.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            appliedCandidate.setValueAt("Not Selected", row, column);
            temp = true;

            try {
                String query = "select Email from register where id ='" + idd + "'";
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(query);
                if (rs.next()) {
                    String sql = "delete from selectedCandidate where Email = '" + rs.getString("Email") + "'";
                    Statement stmt1 = conn.createStatement();
                    stmt1.execute(sql);
                    JOptionPane.showMessageDialog(null, "Candidate is Not Selected");
                }
            } catch (SQLException ex) {
                Logger.getLogger(HumanResource.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private static class MyRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {

            Component component = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            if (column == 6) {
                if (value.equals("Not Selected")) {
                    component.setBackground(Color.RED);
                } else if (value.equals("Selected")) {
                    component.setBackground(Color.GREEN);
                }
            } else {
                component.setBackground(new Color(144, 180, 210));
            }
            return component;
        }
    }

}
